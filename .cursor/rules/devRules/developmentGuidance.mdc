---
description:
globs:
alwaysApply: true
---
# 開発基本方針

## 原則

* **単一責任の原則 (Single Responsibility Principle)**

  * 各関数・クラス・モジュールは、ひとつの明確な責務のみを持つ。
  * 責務が増えた場合は、分割して再利用性・テスト容易性を高める。

* **オープン・クローズドの原則**

  * 機能追加に対しては開かれているが、既存コードの修正には閉じている状態を目指す。

* **依存関係逆転の原則**

  * 具象ではなく抽象に依存する。
  * 実装ではなくインターフェースに依存させる。

* **DRYの原則 (Don't Repeat Yourself)**

  * 同じ処理や知識を繰り返し書かない。
  * 共通化・抽象化して保守性を高める。
  * 既存のコードと統合してもよいが、その影響範囲をすべて調査して問題ないことを確認すること。

## コーディングスタイル

* 命名は「意味が伝わること」を最優先し、省略は避ける。
* Magic Number・直書き文字列は定数化する。
* early return を積極的に使い、ネストを浅く保つ。
* コールバック関数を適切に活用し、処理の分離・再利用を意識する。
* 非同期処理は `then` / `catch` よりも `async` / `await` を推奨する（可読性・例外処理の一貫性向上）。
* 必要に応じてコメントやJsDocを付加する。
    * コメントは「なぜそう書いたのか」や、「別の書き方をするとどう問題だからそう書いたのか」等を簡潔に記すこと。

## 設計と分離

* UIロジックとビジネスロジックは分離する。
* 共通処理はフック・ユーティリティに切り出す。
* データ取得層と表示層を分ける。

## テスト

## レビュー方針

* PRは「可読性」「拡張性」「責務の分離」を最優先でレビューする。
* 個人の好みではなく、ここに記された原則を基準に判断する。
